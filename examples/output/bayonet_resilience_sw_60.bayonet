
num_steps 122;

topology{
  nodes{ S9, S8, S42, S3, S2, S1, S0, S7, S6, S5, S4, S57, S56, S55, S54, S53, S33, S51, S50, S30, S32, S59, S58, S19, S18, S39, S38, S13, S12, S11, S10, S17, S16, S15, S14, S43, S22, S23, S20, S21, S26, S27, S24, S25, S28, S29, S48, S36, S44, S45, H0, H1, S52, S46, S49, S35, S47, S34, S40, S31, S37, S41 }
           
  links{ (S9,pt2) <-> (S11,pt1),
(S8,pt2) <-> (S9,pt1),
(S8,pt3) <-> (S10,pt1),
(S7,pt3) <-> (S8,pt1),
(S40,pt3) <-> (S42,pt1),
(S42,pt2) <-> (S43,pt2),
(S2,pt2) <-> (S3,pt2),
(S1,pt2) <-> (S3,pt1),
(S3,pt3) <-> (S4,pt1),
(S0,pt3) <-> (S2,pt1),
(S0,pt2) <-> (S1,pt1),
(H0,pt1) <-> (S0,pt1),
(S6,pt2) <-> (S7,pt2),
(S5,pt2) <-> (S7,pt1),
(S4,pt3) <-> (S6,pt1),
(S4,pt2) <-> (S5,pt1),
(S56,pt2) <-> (S57,pt1),
(S57,pt2) <-> (S59,pt1),
(S55,pt3) <-> (S56,pt1),
(S56,pt3) <-> (S58,pt1),
(S54,pt2) <-> (S55,pt2),
(S53,pt2) <-> (S55,pt1),
(S52,pt3) <-> (S54,pt1),
(S52,pt2) <-> (S53,pt1),
(S33,pt2) <-> (S35,pt1),
(S32,pt2) <-> (S33,pt1),
(S51,pt3) <-> (S52,pt1),
(S49,pt2) <-> (S51,pt1),
(S50,pt2) <-> (S51,pt2),
(S48,pt3) <-> (S50,pt1),
(S28,pt3) <-> (S30,pt1),
(S30,pt2) <-> (S31,pt2),
(S32,pt3) <-> (S34,pt1),
(S31,pt3) <-> (S32,pt1),
(S59,pt3) <-> (H1,pt1),
(S58,pt2) <-> (S59,pt2),
(S19,pt3) <-> (S20,pt1),
(S18,pt2) <-> (S19,pt2),
(S17,pt2) <-> (S19,pt1),
(S16,pt3) <-> (S18,pt1),
(S37,pt2) <-> (S39,pt1),
(S39,pt3) <-> (S40,pt1),
(S38,pt2) <-> (S39,pt2),
(S36,pt3) <-> (S38,pt1),
(S12,pt2) <-> (S13,pt1),
(S13,pt2) <-> (S15,pt1),
(S11,pt3) <-> (S12,pt1),
(S12,pt3) <-> (S14,pt1),
(S10,pt2) <-> (S11,pt2),
(S16,pt2) <-> (S17,pt1),
(S15,pt3) <-> (S16,pt1),
(S14,pt2) <-> (S15,pt2),
(S43,pt3) <-> (S44,pt1),
(S41,pt2) <-> (S43,pt1),
(S22,pt2) <-> (S23,pt2),
(S20,pt3) <-> (S22,pt1),
(S21,pt2) <-> (S23,pt1),
(S23,pt3) <-> (S24,pt1),
(S20,pt2) <-> (S21,pt1),
(S26,pt2) <-> (S27,pt2),
(S24,pt3) <-> (S26,pt1),
(S27,pt3) <-> (S28,pt1),
(S25,pt2) <-> (S27,pt1),
(S24,pt2) <-> (S25,pt1),
(S28,pt2) <-> (S29,pt1),
(S29,pt2) <-> (S31,pt1),
(S47,pt3) <-> (S48,pt1),
(S48,pt2) <-> (S49,pt1),
(S35,pt3) <-> (S36,pt1),
(S36,pt2) <-> (S37,pt1),
(S44,pt2) <-> (S45,pt1),
(S44,pt3) <-> (S46,pt1),
(S45,pt2) <-> (S47,pt1),
(S46,pt2) <-> (S47,pt2),
(S34,pt2) <-> (S35,pt2),
(S40,pt2) <-> (S41,pt1) }
}

programs{ H0 -> h0, H1 -> h1,
  S9 -> s1, S8 -> s0, S42 -> s2, S3 -> s3, S2 -> s2, S1 -> s1, S0 -> s0, S7 -> s3, S6 -> s2, S5 -> s1, S4 -> s0, S57 -> s1, S56 -> s0, S55 -> s3, S54 -> s2, S53 -> s1, S33 -> s1, S51 -> s3, S50 -> s2, S30 -> s2, S32 -> s0, S59 -> s3, S58 -> s2, S19 -> s3, S18 -> s2, S39 -> s3, S38 -> s2, S13 -> s1, S12 -> s0, S11 -> s3, S10 -> s2, S17 -> s1, S16 -> s0, S15 -> s3, S14 -> s2, S43 -> s3, S22 -> s2, S23 -> s3, S20 -> s0, S21 -> s1, S26 -> s2, S27 -> s3, S24 -> s0, S25 -> s1, S28 -> s0, S29 -> s1, S48 -> s0, S36 -> s0, S44 -> s0, S45 -> s1, S52 -> s0, S46 -> s2, S49 -> s1, S35 -> s3, S47 -> s3, S34 -> s2, S40 -> s0, S31 -> s3, S37 -> s1, S41 -> s1
}

query probability(arrived@H1);

packet_fields{ }

def h0(){
  fwd(1);
}
def h1() state arrived(0){
  arrived=1;
  drop;
}
def s0(){
  if flip(1/2){
    fwd(2);
  }else{
    fwd(3);
  }
}
def s1(){
  fwd(2);
}
def s2()state failing(2){
  if failing == 2 { failing = flip(1/1000); }
  if failing == 1 { drop }
  else{ fwd(2); }
}
def s3(){
  fwd(3);
}


def scheduler() state phase(0), cur_node(0){ // Phase 0: Execute RunSw, Phase 1: Exectue FwdQ
  for p in [0..2){
    if phase == 0{
      for i in [0..k){
        if (Q_in@cur_node).size() > 0{
          return (RunSw,cur_node);
        }
        cur_node = (cur_node + 1) % k;
      }
      phase = 1;
      cur_node = 0;
    }
    if phase == 1{
      for i in [0..k){
        if (Q_out@cur_node).size() > 0{
          return (FwdQ,cur_node);
        }
        cur_node = (cur_node + 1) % k;
      }
      phase = 0;
      cur_node = 0;
    }
  }
  assert(0);
}
