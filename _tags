# OASIS_START
# DO NOT EDIT (digest: b5ec0288148dbf431d640b6558a09b8b)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library probnetkat
"lib/prob/probnetkat.cmxs": use_probnetkat
# Executable decide
"lib/prob/decide.native": package(core)
"lib/prob/decide.native": package(lacaml)
"lib/prob/decide.native": package(owl)
"lib/prob/decide.native": package(ppx_compare)
"lib/prob/decide.native": package(ppx_deriving)
"lib/prob/decide.native": package(ppx_deriving.enum)
"lib/prob/decide.native": package(ppx_deriving.eq)
"lib/prob/decide.native": package(ppx_deriving.show)
"lib/prob/decide.native": package(ppx_import)
"lib/prob/decide.native": package(ppx_sexp_conv)
"lib/prob/decide.native": package(zarith)
"lib/prob/decide.native": use_probnetkat
<lib/prob/*.ml{,i,y}>: package(core)
<lib/prob/*.ml{,i,y}>: package(lacaml)
<lib/prob/*.ml{,i,y}>: package(owl)
<lib/prob/*.ml{,i,y}>: package(ppx_compare)
<lib/prob/*.ml{,i,y}>: package(ppx_deriving)
<lib/prob/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib/prob/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib/prob/*.ml{,i,y}>: package(ppx_deriving.show)
<lib/prob/*.ml{,i,y}>: package(ppx_import)
<lib/prob/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib/prob/*.ml{,i,y}>: package(zarith)
<lib/prob/*.ml{,i,y}>: use_probnetkat
# Executable lb
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(core)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(lacaml)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(owl)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_compare)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_deriving)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_deriving.enum)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_deriving.eq)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_deriving.show)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_import)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(ppx_sexp_conv)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: package(zarith)
<lib/prob/apps/lb/LoadBalancer.{native,byte}>: use_probnetkat
<lib/prob/apps/lb/*.ml{,i,y}>: package(core)
<lib/prob/apps/lb/*.ml{,i,y}>: package(lacaml)
<lib/prob/apps/lb/*.ml{,i,y}>: package(owl)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_compare)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_deriving)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_deriving.show)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_import)
<lib/prob/apps/lb/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib/prob/apps/lb/*.ml{,i,y}>: package(zarith)
<lib/prob/apps/lb/*.ml{,i,y}>: use_probnetkat
# Executable probnetkat_te
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(core)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(frenetic)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(lacaml)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(owl)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_compare)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_deriving)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_deriving.enum)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_deriving.eq)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_deriving.show)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_import)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(ppx_sexp_conv)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: package(zarith)
<lib/prob/apps/te/Frenetic_ProbNetKAT_TE.{native,byte}>: use_probnetkat
<lib/prob/apps/te/*.ml{,i,y}>: package(core)
<lib/prob/apps/te/*.ml{,i,y}>: package(frenetic)
<lib/prob/apps/te/*.ml{,i,y}>: package(lacaml)
<lib/prob/apps/te/*.ml{,i,y}>: package(owl)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_compare)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_deriving)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_deriving.enum)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_deriving.eq)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_deriving.show)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_import)
<lib/prob/apps/te/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib/prob/apps/te/*.ml{,i,y}>: package(zarith)
<lib/prob/apps/te/*.ml{,i,y}>: use_probnetkat
# OASIS_STOP
# see https://github.com/janestreet/ppx_inline_test/issues/3
<lib_test/*.ml{,i}>: predicate(ppx_driver)
<lib_test/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-lib frenetic)
true: thread
true: -traverse
# SJS: use shared extern token file (-> see myocamlbuild.ml)
true: extern_tokens
