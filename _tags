# OASIS_START
# DO NOT EDIT (digest: 513622739320a5bf322fc0212d32f148)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library frenetic
"lib/frenetic.cmxs": use_frenetic
<lib/*.ml{,i,y}>: package(base64)
<lib/*.ml{,i,y}>: package(compiler-libs.common)
<lib/*.ml{,i,y}>: package(core)
<lib/*.ml{,i,y}>: package(cstruct)
<lib/*.ml{,i,y}>: package(cstruct.ppx)
<lib/*.ml{,i,y}>: package(ipaddr)
<lib/*.ml{,i,y}>: package(menhirLib)
<lib/*.ml{,i,y}>: package(ocamlgraph)
<lib/*.ml{,i,y}>: package(ppx_compare)
<lib/*.ml{,i,y}>: package(ppx_deriving.std)
<lib/*.ml{,i,y}>: package(ppx_enumerate)
<lib/*.ml{,i,y}>: package(ppx_fields_conv)
<lib/*.ml{,i,y}>: package(ppx_hash)
<lib/*.ml{,i,y}>: package(ppx_sexp_conv)
<lib/*.ml{,i,y}>: package(ppx_type_conv)
<lib/*.ml{,i,y}>: package(sedlex)
<lib/*.ml{,i,y}>: package(sexplib)
<lib/*.ml{,i,y}>: package(str)
<lib/*.ml{,i,y}>: package(tcpip)
<lib/*.ml{,i,y}>: package(tcpip.unix)
<lib/*.ml{,i,y}>: package(threads)
<lib/*.ml{,i,y}>: package(yojson)
# Library ppx
"ppx/ppx.cmxs": use_ppx
# Executable ppx
<ppx/ppx.{native,byte}>: package(base64)
<ppx/ppx.{native,byte}>: package(compiler-libs.common)
<ppx/ppx.{native,byte}>: package(core)
<ppx/ppx.{native,byte}>: package(cstruct)
<ppx/ppx.{native,byte}>: package(cstruct.ppx)
<ppx/ppx.{native,byte}>: package(ipaddr)
<ppx/ppx.{native,byte}>: package(menhirLib)
<ppx/ppx.{native,byte}>: package(ocamlgraph)
<ppx/ppx.{native,byte}>: package(ppx_compare)
<ppx/ppx.{native,byte}>: package(ppx_deriving.std)
<ppx/ppx.{native,byte}>: package(ppx_enumerate)
<ppx/ppx.{native,byte}>: package(ppx_fields_conv)
<ppx/ppx.{native,byte}>: package(ppx_hash)
<ppx/ppx.{native,byte}>: package(ppx_sexp_conv)
<ppx/ppx.{native,byte}>: package(ppx_tools)
<ppx/ppx.{native,byte}>: package(ppx_tools.metaquot)
<ppx/ppx.{native,byte}>: package(ppx_type_conv)
<ppx/ppx.{native,byte}>: package(sedlex)
<ppx/ppx.{native,byte}>: package(sexplib)
<ppx/ppx.{native,byte}>: package(str)
<ppx/ppx.{native,byte}>: package(tcpip)
<ppx/ppx.{native,byte}>: package(tcpip.unix)
<ppx/ppx.{native,byte}>: package(threads)
<ppx/ppx.{native,byte}>: package(yojson)
<ppx/ppx.{native,byte}>: use_frenetic
<ppx/ppx.{native,byte}>: use_ppx
<ppx/*.ml{,i,y}>: package(base64)
<ppx/*.ml{,i,y}>: package(compiler-libs.common)
<ppx/*.ml{,i,y}>: package(core)
<ppx/*.ml{,i,y}>: package(cstruct)
<ppx/*.ml{,i,y}>: package(cstruct.ppx)
<ppx/*.ml{,i,y}>: package(ipaddr)
<ppx/*.ml{,i,y}>: package(menhirLib)
<ppx/*.ml{,i,y}>: package(ocamlgraph)
<ppx/*.ml{,i,y}>: package(ppx_compare)
<ppx/*.ml{,i,y}>: package(ppx_deriving.std)
<ppx/*.ml{,i,y}>: package(ppx_enumerate)
<ppx/*.ml{,i,y}>: package(ppx_fields_conv)
<ppx/*.ml{,i,y}>: package(ppx_hash)
<ppx/*.ml{,i,y}>: package(ppx_sexp_conv)
<ppx/*.ml{,i,y}>: package(ppx_tools)
<ppx/*.ml{,i,y}>: package(ppx_tools.metaquot)
<ppx/*.ml{,i,y}>: package(ppx_type_conv)
<ppx/*.ml{,i,y}>: package(sedlex)
<ppx/*.ml{,i,y}>: package(sexplib)
<ppx/*.ml{,i,y}>: package(str)
<ppx/*.ml{,i,y}>: package(tcpip)
<ppx/*.ml{,i,y}>: package(tcpip.unix)
<ppx/*.ml{,i,y}>: package(threads)
<ppx/*.ml{,i,y}>: package(yojson)
<ppx/*.ml{,i,y}>: use_frenetic
<ppx/*.ml{,i,y}>: use_ppx
# OASIS_STOP
<lib/Frenetic_NetKAT_Lexer.*>: package(ppx_import)
# see https://github.com/janestreet/ppx_inline_test/issues/3
<lib_test/*.ml{,i}>: predicate(ppx_driver)
<lib_test/*.ml{,i}>: pp(ppx-jane -dump-ast -inline-test-lib frenetic)
true: thread
true: -traverse
# SJS: use shared extern token file (-> see myocamlbuild.ml)
true: extern_tokens
